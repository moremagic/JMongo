/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package jmongo.gui;

import com.mongodb.util.JSON;
import java.io.File;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.plaf.basic.BasicFileChooserUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import jmongo.DBConContoroller;

/**
 * GridFS データ表示用フレーム
 *
 * @author itou
 */
public class GridFsFrame extends javax.swing.JInternalFrame {

    private DBConContoroller m_con = null;
    private DefaultTreeModel m_treeModel = null;

    /**
     * Creates new form GridFsFrame
     */
    public GridFsFrame(DBConContoroller con) {
        initComponents();
        m_con = con;
        
        //Frame icon
        this.setFrameIcon(new ImageIcon(getClass().getResource("/jmongo/icon/famfamfam_silk_icons_v013/icons/database_save.png")));

        //ツリーパネルの初期化
        DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer();
        ImageIcon icon = new ImageIcon(getClass().getResource("/jmongo/icon/famfamfam_silk_icons_v013/icons/folder.png"));
        ImageIcon closeIcon = new ImageIcon(getClass().getResource("/jmongo/icon/famfamfam_silk_icons_v013/icons/world_add.png"));
        ImageIcon openIcon = new ImageIcon(getClass().getResource("/jmongo/icon/famfamfam_silk_icons_v013/icons/world.png"));
        renderer.setLeafIcon(icon);
        renderer.setClosedIcon(closeIcon);
        renderer.setOpenIcon(openIcon);
        jTree1.setCellRenderer(renderer);
        
        DefaultMutableTreeNode root = new DefaultMutableTreeNode(m_con.getDBName() + "[" + m_con.getHost() + "]");
        m_treeModel = new DefaultTreeModel(root);
        jTree1.setModel(m_treeModel);
        createBucketCollectionTree();

        /**
         * Tree選択位置が変わるときの動的読み込み
         */
        jTree1.addTreeSelectionListener(
                new TreeSelectionListener() {

                    public void valueChanged(TreeSelectionEvent e) {
                        SwingUtilities.invokeLater(new Runnable() {

                            public void run() {
                                final String nodeName = jTree1.getLastSelectedPathComponent().toString();
                                if (!nodeName.equals(m_treeModel.getRoot().toString())) {
                                    showData(nodeName);
                                }
                            }
                        });
                    }
                });
    }

    /**
     * 現在選択されているコレクション名を取得する
     *
     * @return コレクション名
     */
    public String getBucketCollectionName() {
        return jTree1.getLastSelectedPathComponent().toString();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jPanel5 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("GridFS_Viewer");

        jPanel2.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setViewportView(jTree1);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jButton4.setText("bucket add");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton4);

        jPanel2.add(jPanel5, java.awt.BorderLayout.PAGE_END);

        jSplitPane1.setLeftComponent(jPanel2);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane2.setViewportView(jTable1);

        jPanel3.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jPanel10.setLayout(new javax.swing.BoxLayout(jPanel10, javax.swing.BoxLayout.LINE_AXIS));

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("filename :");
        jLabel7.setPreferredSize(new java.awt.Dimension(80, 13));
        jPanel10.add(jLabel7);

        jPanel9.add(jPanel10);

        jPanel11.setLayout(new javax.swing.BoxLayout(jPanel11, javax.swing.BoxLayout.LINE_AXIS));

        jTextField1.setColumns(20);
        jPanel11.add(jTextField1);

        jButton6.setText("Find");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel11.add(jButton6);

        jPanel9.add(jPanel11);

        jPanel3.add(jPanel9, java.awt.BorderLayout.NORTH);

        jSplitPane1.setRightComponent(jPanel3);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jButton1.setText("add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton1);

        jButton2.setText("delete");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton2);

        jPanel1.add(jPanel4);

        jButton3.setText("down load");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        final String nodeName = jTree1.getLastSelectedPathComponent().toString();
        if (!nodeName.equals(m_treeModel.getRoot().toString())) {
            showData(nodeName);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String bucketName = jTree1.getLastSelectedPathComponent().toString();
        if (bucketName.equals(m_treeModel.getRoot().toString())) {
            return;
        }

        JFileChooser filechooser = new JFileChooser();
        filechooser.setMultiSelectionEnabled(true);
        
        int selected = filechooser.showOpenDialog(this);
        if (selected == JFileChooser.APPROVE_OPTION) {
            clearList();
            File[] files = filechooser.getSelectedFiles();
            for(final File f: files){
                final boolean b = m_con.saveFile(bucketName, f);
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        if (!b) {
                            JOptionPane.showMessageDialog(null, "[" + f.getName() + "]\r\n保存に失敗しました", "保存に失敗しました", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                });
            }
            showData();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String bucketName = jTree1.getLastSelectedPathComponent().toString();
        if (bucketName.equals(m_treeModel.getRoot().toString())) {
            return;
        }

        for (int i = 0; i < jTable1.getColumnCount(); i++) {
            if ("filename".equals(jTable1.getColumnName(i))) {
                for (int idx : jTable1.getSelectedRows()) {
                    m_con.deleteFile(bucketName, jTable1.getValueAt(idx, i).toString());
                }
                showData();
                break;
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String bucketName = jTree1.getLastSelectedPathComponent().toString();
        if (bucketName.equals(m_treeModel.getRoot().toString())) {
            return;
        }
        
        String fileName = "";
        for (int i = 0; i < jTable1.getColumnCount(); i++) {
            if ("filename".equals(jTable1.getColumnName(i))) {
                fileName = jTable1.getValueAt(jTable1.getSelectedRow(), i).toString();
                break;
            }
        }
        
        JFileChooser filechooser = new JFileChooser();
        BasicFileChooserUI ui = (BasicFileChooserUI) filechooser.getUI();
        ui.setFileName(fileName);         
                
        int selected = filechooser.showSaveDialog(this);
        if (selected == JFileChooser.APPROVE_OPTION) {
            File f = filechooser.getSelectedFile();
            if (m_con.loadFile(bucketName, fileName, f)){
                JOptionPane.showMessageDialog(this, "ダウンロードに成功しました", "ダウンロードに成功しました", JOptionPane.INFORMATION_MESSAGE);
                showData();
            } else {
                JOptionPane.showMessageDialog(this, "ダウンロードに失敗しました", "ダウンロードに失敗しました", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        String bucketName = JOptionPane.showInputDialog(this, "add backet name.");
        m_con.getBucketFiles(bucketName);
        
        createBucketCollectionTree();
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GridFsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GridFsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GridFsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GridFsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new GridFsFrame(null).setVisible(true);
            }
        });
    }

    /**
     * メインツリーパネルの初期化
     */
    private synchronized void createBucketCollectionTree() {
        try {
            DefaultMutableTreeNode root = (DefaultMutableTreeNode) m_treeModel.getRoot();
            root.removeAllChildren();

            for (String s : m_con.getBucketCollections()) {
                DefaultMutableTreeNode collectionReef = new DefaultMutableTreeNode(s);
                root.add(collectionReef);
            }

            jTree1.updateUI();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "接続設定を確認してください \n[" + ex.toString() + "]", "接続に失敗しました", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(GridFsFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * リストをクリアします
     */
    private void clearList() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
    }

    /**
     * 選択したコレクションのデータを表示する
     */
    private void showData() {
        showData(getBucketCollectionName());
    }

    /**
     * 指定したコレクションのデータを表示する
     *
     * @param bucketName
     */
    private synchronized void showData(String bucketName) {
        try {
            //データのクリア
            clearList();

            //検索条件の設定
            Map<String, Object> query = new HashMap<String, Object>();
            if (jTextField1.getText().length() > 0) {
                query.put("filename", Pattern.compile(jTextField1.getText() + ".*"));
            }

            //データの取得
            String[] datas = m_con.getBucketFiles(bucketName, query);
            Map[] mapArray = new Map[datas.length];
            for (int i = 0; i < datas.length; i++) {
                mapArray[i] = (Map) JSON.parse(datas[i]);
            }

            //テーブルに設定
            if (mapArray.length > 0) {
                Object[] keys = mapArray[0].keySet().toArray();
                DefaultTableModel model = new DefaultTableModel(null, keys);
                jTable1.setModel(model);
                for (Map m : mapArray) {
                    Object[] lines = new Object[keys.length];
                    for (int i = 0; i < lines.length; i++) {
                        lines[i] = m.get(keys[i]);
                    }
                    model.addRow(lines);
                }
            }

        } catch (Exception ex) {
            Logger.getLogger(GridFsFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
}
